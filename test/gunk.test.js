'use strict'

const { test } = require('brittle')
const defaults = require('script-linker/defaults')

const gunk = require('../gunk')

test('overrides', async function (t) {
  t.ok(Array.isArray(gunk.overrides))
  t.ok(gunk.overrides.includes('pear'))
  t.ok(gunk.overrides.includes('electron'))
  t.ok(gunk.overrides.includes('crc-universal'))
  t.ok(gunk.overrides.includes('quickbit-universal'))
  t.ok(gunk.overrides.includes('sodium-native'))
  t.ok(gunk.overrides.includes('udx-native'))
  t.ok(gunk.overrides.includes('rocksdb-native'))
  t.ok(gunk.overrides.includes('fs-native-extensions'))
  t.ok(gunk.overrides.includes('assert'))
  t.ok(gunk.overrides.includes('console'))
  t.ok(gunk.overrides.includes('events'))
  t.ok(gunk.overrides.includes('fs'))
  t.ok(gunk.overrides.includes('fs/promises'))
  t.ok(gunk.overrides.includes('http'))
  t.ok(gunk.overrides.includes('os'))
  t.ok(gunk.overrides.includes('path'))
  t.ok(gunk.overrides.includes('child_process'))
  t.ok(gunk.overrides.includes('repl'))
  t.ok(gunk.overrides.includes('url'))
  t.ok(gunk.overrides.includes('tty'))
  t.ok(gunk.overrides.includes('module'))
  t.ok(gunk.overrides.includes('process'))
  t.ok(gunk.overrides.includes('timers'))
  t.ok(gunk.overrides.includes('inspector'))
})

test('builtins', async function (t) {
  t.ok(gunk.builtins.has('crc-universal'))
  t.ok(gunk.builtins.has('quickbit-universal'))
  t.ok(gunk.builtins.has('sodium-native'))
  t.ok(gunk.builtins.has('udx-native'))
  t.ok(gunk.builtins.has('fs-native-extensions'))
  t.ok(gunk.builtins.has('rocksdb-native'))
  t.ok(gunk.builtins.has('fs'))
  t.ok(gunk.builtins.has('fs/promises'))
  t.ok(gunk.builtins.has('path'))
  t.ok(gunk.builtins.has('os'))
  t.ok(gunk.builtins.has('events'))
  t.ok(gunk.builtins.has('http'))
  t.ok(gunk.builtins.has('module'))
  t.ok(gunk.builtins.has('child_process'))

  const keys = gunk.builtins.keys()
  t.ok(keys.includes('crc-universal'))
  t.ok(keys.includes('quickbit-universal'))
  t.ok(keys.includes('sodium-native'))
  t.ok(keys.includes('udx-native'))
  t.ok(keys.includes('fs-native-extensions'))
  t.ok(keys.includes('rocksdb-native'))
  t.ok(keys.includes('fs'))
  t.ok(keys.includes('fs/promises'))
  t.ok(keys.includes('path'))
  t.ok(keys.includes('os'))
  t.ok(keys.includes('events'))
  t.ok(keys.includes('http'))
  t.ok(keys.includes('module'))
  t.ok(keys.includes('child_process'))
})

test('bareBuiltins', async function (t) {
  t.ok(gunk.bareBuiltins.has('electron'))

  const bareKeys = gunk.bareBuiltins.keys()
  t.ok(bareKeys.includes('electron'))
})

test('platform', async function (t) {
  t.ok(gunk.platform.symbol === `platform-${defaults.symbol}`)
  t.ok(gunk.platform.protocol === 'holepunch')
  t.ok(gunk.platform.runtimes.length === 2)
  t.ok(gunk.platform.runtimes[0] === 'node')
  t.ok(gunk.platform.runtimes[1] === 'holepunch')
  t.ok(gunk.platform.mapImport('id') === 'id')

  t.ok(gunk.platform.map('id', { protocol: 'test', isImport: true, isBuiltin: false, isSourceMap: false, isConsole: false }) === 'id+test+esm')
  t.ok(gunk.platform.map('id', { protocol: 'test', isImport: false, isBuiltin: true, isSourceMap: false, isConsole: false }) === '/~id+test+cjs')
  t.ok(gunk.platform.map('id', { protocol: 'test', isImport: false, isBuiltin: false, isSourceMap: true, isConsole: false }) === 'id+test+map')
  t.ok(gunk.platform.map('id', { protocol: 'test', isImport: false, isBuiltin: false, isSourceMap: false, isConsole: true }) === 'id+test+test')
})

test('app', async function (t) {
  t.ok(gunk.app.symbol === defaults.symbol)
  t.ok(gunk.app.protocol === defaults.protocol)
  t.ok(gunk.app.runtimes.length === 2)
  t.ok(gunk.app.runtimes[0] === 'node')
  t.ok(gunk.app.runtimes[1] === 'holepunch')
  t.ok(gunk.app.mapImport('id') === 'id')

  t.ok(gunk.app.map('id', { protocol: 'test', isImport: true, isBuiltin: false, isSourceMap: false, isConsole: false }) === 'id+test+esm')
  t.ok(gunk.app.map('id', { protocol: 'test', isImport: false, isBuiltin: true, isSourceMap: false, isConsole: false }) === '/~id+test+cjs')
  t.ok(gunk.app.map('id', { protocol: 'test', isImport: false, isBuiltin: false, isSourceMap: true, isConsole: false }) === 'id+test+map')
  t.ok(gunk.app.map('id', { protocol: 'test', isImport: false, isBuiltin: false, isSourceMap: false, isConsole: true }) === 'id+test+test')
})
